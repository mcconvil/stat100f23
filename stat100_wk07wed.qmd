---
pagetitle: "More Regression"
format: 
  revealjs:
    html-math-method: mathjax
    chalkboard: true
    incremental: true
    theme: [default, custom.scss]
    multiplex: true
    height: 900
    width: 1600
    slide-number: c
    auto-stretch: false
    callout-appearance: simple
    pdf-max-pages-per-slide: 1
    menu: 
      side: right
      numbers: true
    code-overflow: wrap
execute:
  echo: true
  warning: false
  message: false
  fig-asp: 0.75
  fig-width: 8
#  fig-align: center
  fig-dpi: 500
---

```{r}
#| include: false
#| warning: false
#| message: false
# Some global options still not available in quarto
 knitr::opts_chunk$set(fig.align = 'center')
library(knitr)
library(tidyverse)
theme_update(text = element_text(size = 16))
```

::: columns
::: {.column .center width="45%"}
![](img/DAW.png){width="90%"}
:::

::: {.column .center width="55%"}
[More Regression]{.custom-title}

<br> <br> <br>

[Kelly McConville]{.custom-subtitle}

[Stat 100 <br> Week 7 \| Fall 2023]{.custom-subtitle}
:::
:::

------------------------------------------------------------------------



## Announcements

-   Don't forget about this week's lecture quiz.

### Goals for Today

::: columns
::: column

-   Handling categorical, explanatory variables **with more than 2 categories**

:::

::: column
-   Regression with polynomial explanatory variables
:::
:::


# But first, a quick survey.

---


### Linear Regression

Model Form:

$$ 
\begin{align}
y &= \beta_o + \beta_1 x_1 + \beta_2 x_2 + \cdots + \beta_p x_p + \epsilon
\end{align}
$$

Linear regression is a flexible class of models that allow for:

::: nonincremental

* Both quantitative and categorical **explanatory** variables.


* **Multiple** explanatory variables.


* **Curved** relationships between the response variable and the explanatory variable.



* BUT the **response variable is quantitative**.

:::

---

### Example: Movies

Let's model a movie's critic rating using the audience rating and the movie's genre.

```{r}
library(tidyverse)
movies <- read_csv("https://www.lock5stat.com/datasets2e/HollywoodMovies.csv")

# Restrict our attention to dramas, horrors, and actions
movies2 <- movies %>%
  filter(Genre %in% c("Drama", "Horror", "Action")) %>%
  drop_na(Genre, AudienceScore, RottenTomatoes)
glimpse(movies2)
```

**Response variable:**

**Explanatory variables:**

---

#### How should we encode a categorical variable with more than 2 categories?

Let's start with what NOT to do.

<br>
<br>

**Equal Slopes Model:**


---

#### How should we encode a categorical variable with more than 2 categories?

What we should do instead.

<br>
<br>

**Equal Slopes Model:**


---

#### How should we encode a categorical variable with more than 2 categories?



<br>
<br>


**Different Slopes Model:**


---

### Exploring the Data


```{r}
#| output-location: column

ggplot(data = movies2,
       mapping = aes(x = AudienceScore,
                     y = RottenTomatoes,
                     color = Genre)) +
  geom_point(alpha = 0.5) +
  stat_smooth(method = lm, se = FALSE) +
  geom_abline(slope = 1, intercept = 0)
```

::: nonincremental

* Trends?

* Should we include interaction terms in the model?

:::

---

### Side-bar: Identify Outliers on a Graph


```{r}
outliers <- movies2 %>%
  mutate(DiffScore = AudienceScore - RottenTomatoes) %>%
  filter(DiffScore > 50 | DiffScore < -30) %>%
  select(Movie, DiffScore, AudienceScore, RottenTomatoes, Genre)
outliers
```

---

### Side-bar: Identify Outliers on a Graph


```{r}
#| output-location: column

library(ggrepel)
ggplot(data = movies2,
       mapping = aes(x = AudienceScore,
                     y = RottenTomatoes,
                     color = Genre)) +
  geom_point(alpha = 0.5) +
  stat_smooth(method = lm, se = FALSE) +
  geom_abline(slope = 1, intercept = 0) +
  geom_text_repel(data = outliers,
                  mapping = aes(label =
                                  Movie),
                  force = 10,
                  show.legend = FALSE,
                  size = 6)
```



---


### Building the Model:

Full model form: 

```{r}
mod <- lm(RottenTomatoes ~ AudienceScore*Genre, data = movies2)

library(moderndive)
get_regression_table(mod) 
```

Estimated model for Dramas:

---

### Coming Back to Our Exploratory Data Analysis



```{r}
#| output-location: column

library(ggrepel)
ggplot(data = movies2,
       mapping = aes(x = AudienceScore,
                     y = RottenTomatoes,
                     color = Genre)) +
  geom_point(alpha = 0.5)
```

Evidence of **curvature**?

---

## Adding a Curve to your Scatterplot


```{r}
#| output-location: column
ggplot(data = movies2,
       mapping = aes(x = AudienceScore,
                     y = RottenTomatoes,
                     color = Genre)) +
  geom_point(alpha = 0.5) +
  stat_smooth(method = lm, se = FALSE, 
        formula = y ~ poly(x, degree = 2))
```

---

### Fitting the New Model 

```{r}
#| output-location: slide

mod2 <- lm(RottenTomatoes ~ poly(AudienceScore, degree = 2, raw = TRUE)*Genre, 
           data = movies2)
get_regression_table(mod2, print = TRUE) 
```

---


### Let's Practice with the `palmerpenguins`!

![](img/penguins.png){fig-align="center"}

---

### Let's Practice with the `palmerpenguins`!

```{r}
library(palmerpenguins)
glimpse(penguins)
```

---

### Let's Practice with the `palmerpenguins`!


```{r}
#| output-location: column

ggplot(data = penguins,
       mapping = aes(x = flipper_length_mm,
                     y = bill_length_mm,
                     color = species)) +
  geom_point(alpha = 0.7) +
  stat_smooth(method = "lm", se = FALSE)
```


---


```{r}
mod1 <- lm(bill_length_mm ~ flipper_length_mm + species, data = penguins)
get_regression_table(mod1, print = TRUE)
```

```{r}
mod2 <- lm(bill_length_mm ~ flipper_length_mm * species, data = penguins)
get_regression_table(mod2, print = TRUE)
```

---

## Practice

Determine and interpret the slope for a **Chinstrap** penguin using Model 1.

<br>
<br>

Determine and interpret the slope for a **Adelie** penguin using Model 1.

<br>
<br>

In Model 1, interpret $\hat{\beta}_2$.

<br>
<br>

Determine and interpret the slope for a **Chinstrap** penguin using Model 2.

<br>
<br>

Determine and interpret the slope for a **Adelie** penguin using Model 2.


