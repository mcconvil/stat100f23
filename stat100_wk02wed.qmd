---
pagetitle: "Data Viz"
format: 
  revealjs:
    chalkboard: true
    incremental: true
    theme: [default, custom.scss]
    multiplex: true
    height: 900
    width: 1600
    slide-number: c
    auto-stretch: false
    callout-appearance: simple
    pdf-max-pages-per-slide: 1
    menu: 
      side: right
      numbers: true
    code-overflow: wrap
execute:
  echo: true
  warning: false
  message: false
  fig-asp: 0.75
  fig-width: 8
#  fig-align: center
  fig-dpi: 500
---

```{r}
#| include: false
#| warning: false
#| message: false
# Some global options still not available in quarto
 knitr::opts_chunk$set(fig.align = 'center')
library(knitr)
library(tidyverse)
theme_update(text = element_text(size = 20))
```

::: columns
::: {.column .center width="55%"}
![](img/DAW.png){width="80%"}
:::

::: {.column .center width="45%"}
<br>

[Data Visualization]{.custom-title}

<br> <br> <br> <br>

[Kelly McConville]{.custom-subtitle}

[Stat 100 <br> Week 2 \| Fall 2023]{.custom-subtitle}
:::
:::

## Announcements

-   Class in full swing:
    -   [Sections](https://docs.google.com/spreadsheets/d/10wScs6Z7hpYK16NnmyU_q8DlKn4iF_U3dB19a-ts0g0/edit?usp=sharing): Can find your assigned section in my.harvard but need to go to the linked spreadsheet to find the room!
    -   [Office hours](https://docs.google.com/spreadsheets/d/1eGlvDVPFceat2xck-y0r_rhrXPZBxjkW-rmIWFqg68w/edit?usp=sharing)
        -   Fill out [this form](https://forms.gle/fG1LruemSCBQucePA) after your first visit.
    -   Wrap-ups on Th 3-4pm and Fri 10:30 - 11:30am in SC 309
    -   Lecture quiz will be released in **Gradescope** after class today.

------------------------------------------------------------------------

## Teachly

-   Teachly is a platform that allows you to fill out a profile so that we can get to know you and your interests in stats/data science better.

-   You should have received two emails:

    -   The general Teachly profile
    -   A couple additional Stat 100 related questions

-   Each question is optional. You will not be assessed on its completion or your answers.

-   Ways we plan to use Teachly:

    -   To get to know you better.
    -   To find out what data applications you might be interested in seeing.
    -   To tailor advice related to future statistical endeavors.

------------------------------------------------------------------------

## Goals for Today

::: columns
::: {.column width="\"50%"}
**First Segment:**

-   Motivate data visualizations.
-   Develop **language** to talk about the components of a graphic.
-   Practice deconstructing graphics.
-   Discuss good graphical practices.
:::

::: {.column width="\"50%"}
**Second Segment:**

-   Learn the general structure of `ggplot2`.
-   Learn a few standard graphs for numerical/quantitative data:
    -   **Histogram**: one numerical variable
    -   **Side-by-side boxplot**: one numerical variable and one categorical variable
    -   **Side-by-side violin plot**: one numerical variable and one categorical variable
:::
:::

------------------------------------------------------------------------

## Why construct a graph? {.center}

<br>

::: {.fragment .fade-up .midi}
To **explore** the data.
:::

::: {.fragment .fade-up .midi}
To **summarize** the data.
:::

::: {.fragment .fade-up .midi}
To showcase **trends** and make **comparisons**.
:::

::: {.fragment .fade-up .midi}
To tell a compelling **story**.
:::

------------------------------------------------------------------------

## Challenger

-   On January 27th, 1986, engineers from Morton Thiokol recommended NASA delay launch of space shuttle *Challenger* due to cold weather.

    -   Believed cold weather impacted the o-rings that held the rockets together.
    -   Used 13 charts in their argument.

-   After a two hour conference call, the engineer's recommendation was overruled due to lack of persuasive evidence and the launch proceeded.

-   The Challenger exploded 73 seconds into launch.

------------------------------------------------------------------------

## Challenger

Here's one of those charts.

![](img/table_o_rings.jpg){width="90%" fig-align="center"}

------------------------------------------------------------------------

## Challenger

Here's another one of those charts.

![](img/o_ring_rockets.jpg){width="30%" fig-align="center"}

------------------------------------------------------------------------

## Challenger

Here's a graphic I created from [Edward Tufte](https://en.wikipedia.org/wiki/Edward_Tufte)'s data.

```{r, echo = FALSE, out.width = "60%", fig.asp = .6}
library(ggplot2)
library(dplyr)
library(readr)
Challenger <- read_delim("data/Challenger2.txt", 
                         "\t", escape_double =
                           FALSE, trim_ws = TRUE)



ggplot(data = Challenger, mapping = aes(x = T, y = I)) + geom_point(alpha = 0.5, color = "orange", size = 5) + labs(y = "Tufte's O-ring damage index", x = "Temperature (degrees F) at launch") #+ geom_smooth(se = FALSE)
```

------------------------------------------------------------------------

## Challenger

This adaptation is a recreation of Edward Tufte's graphic.

::: aside
For more information on this example and other examples, check out [Tufte's book](https://www.edwardtufte.com/tufte/books_visex).
:::

```{r, echo = FALSE, out.width = "60%", fig.align='center', fig.asp= .6}

ggplot() + geom_point(data = Challenger, mapping = aes(x = T, y = I),alpha = 0.5, color = "orange", size = 5) + labs(y = "Tufte's O-ring damage index", x = "Temperature (degrees F) at launch") +
  xlim(22, 85) +
  geom_rect(mapping = aes(xmin = 26, xmax = 29, ymin = 0, ymax = 11), alpha = 0.2) +  annotate(geom = "text", x = 28, y = 6, label = "Forcasted \ntemperature \nfor \nJanuary 27th")#+ geom_smooth(se = FALSE) 
```

## Now let's learn the **Grammar of Graphics**. {.center}

::: {.fragment .fade-up .midi}
We will use this grammar to:
:::

::: {.fragment .fade-up .midi}
Decompose and understand existing graphs.
:::

::: {.fragment .fade-up .midi}
Create our own graphs with the `R` package `ggplot2`.
:::

------------------------------------------------------------------------

## Grammar of Graphics

-   **data**: Data frame that contains the raw data
    -   Variables used in the graph
-   **geom**: Geometric **shape** that the data are mapped to.
    -   EX: Point, line, bar, text, ...
-   **aesthetic**: Visual properties of the **geom**
    -   EX: X (horizontal) position, y (vertical) position, color, fill, shape
-   **scale**: Controls how data are mapped to the visual values of the aesthetic.
    -   EX: particular colors, log scale
-   **guide**: Legend/key to help user convert visual display back to the data

::: fragment
For right now, we won't focus on the **names** of particular types of graphs (e.g., scatterplot) but on the **elements** of graphs.
:::

------------------------------------------------------------------------

::: columns
::: {.column width="30%"}
### Example 1

-   What are the variables?
-   What **geom** are the variables map to?
-   What are the **aesthetic**s of the **geom**?
-   How is each variable mapped to an **aesthetic**?
-   What additional context is provided?
-   What story is the graph telling?
:::

::: {.column width="70%"}
![](img/anne_hathaway.png){width="85%" fig-align="center" fig-dpi="200"}
:::
:::

------------------------------------------------------------------------

::: columns
::: {.column width="30%"}
### Example 2

-   What are the variables?
-   What **geom** are the variables map to?
-   What are the **aesthetic**s of the **geom**?
-   How is each variable mapped to an **aesthetic**?
-   What additional context is provided?
-   What story is the graph telling?
:::

::: {.column .center width="70%"}
![](img/harassment_graphic.png){width="75%" fig-align="center" fig-dpi="200"}
:::
:::

# Visualization Considerations

------------------------------------------------------------------------

### What additional context should my graphs have?

-   For context, at a minimum include

    -   Axis labels (with units reported).
    -   Legends.
    -   Data source.

-   Think about the **stories/questions** your visualization answers.

-   Determine what **context/background information** your viewer needs.

-   Visualizing data involves **editorial choices**.

    -   What to highlight.
    -   What comparisons to make easy to see.
    -   What scales to use.

------------------------------------------------------------------------

### Context Example

![](img/moma_size.png){width="70%" fig-align="center"}

------------------------------------------------------------------------

### What visual cues are easier to compare?

![](img/visual_cues.png){width="35%" fig-align="center"}

------------------------------------------------------------------------

### What to consider with color?

Consider color blindness.

```{r, echo = FALSE, fig.asp = .4}
library(colorBlindness)
mat <- matrix(1:81, nrow = 9, ncol = 9)

library(ggplot2)
library(reshape2)
mat1 <- melt(t(mat[9:1, ]))
len <- length(Blue2DarkRed12Steps)-1
mat1$v2 <- cut(mat1$value,
              breaks = seq(0,ceiling(81/len)*len, 
                           length.out = len+1))
ht <- ggplot(mat1) + 
  geom_tile(aes(x=Var1, y=Var2, fill=v2)) + 
  scale_fill_manual(values=Blue2DarkRed12Steps) + 
  theme_bw() +
  guides(fill = 'none')
# check the plot by CVD simulator
cvdPlot(ht)
```

------------------------------------------------------------------------

### Color Palettes -- Sequential

![](img/dude.png){width="60%" fig-align="center"}

::: {aside}
Maps, like the [Dude map](https://qz.com/316906/the-dude-map-how-american-men-refer-to-their-bros/) are also a great way to provide context!
:::

------------------------------------------------------------------------

### Color Palettes -- Diverging

![](img/nba_2015.png){width="60%" fig-align="center"}

::: {aside}
[Adam Pearce's 2015 NBA Games](https://roadtolarissa.com/nba-minutes/)
:::

------------------------------------------------------------------------

### Color Palettes -- Qualitative

![](img/dogs.png){width="60%" fig-align="center"}

::: {aside}
[information is beautiful's Best in Show](https://www.informationisbeautiful.net/visualizations/best-in-show-whats-the-top-data-dog/)
:::

------------------------------------------------------------------------

## Many Ways To Visually Tell A Story

Washington Post's Approach:

![](img/wp_shooter.png){width="50%" fig-align="center"}

[Periscopic's Approach](https://guns.periscopic.com/?year=2013)

------------------------------------------------------------------------

## Bad Graphics

Because of all the design choices, it is much easier to make a bad graph than a good graph.

![](img/pizza_pie.png){width="40%" fig-align="center"}

------------------------------------------------------------------------

## Misleading Graphics

Be careful that your design choices don't cause your viewer to draw incorrect conclusions about the data:

![](img/FLguns.jpg){width="40%" fig-align="center"}

-   Just letting the software make all the design choices can still lead to misleading graphs (recall the Georgia COVID graph).

------------------------------------------------------------------------

## Summary Thoughts on Graphical Considerations

-   Good graphics are one's where the findings and insights are **obvious** to the viewer.

    -   Add information and key **context**.

-   Facilitate the **comparisons** that correspond to the research question.

    -   Recall the three Georgia COVID counts graphs from Day 1!

-   Data visualizations are **not neutral**.

-   It is easier to see the differences and similarities between different types of graphics if we learn the **grammar of graphics**.

-   Practicing **decomposing** graphics should make it easier for us to **compose** our own graphics.

------------------------------------------------------------------------

## Load Necessary Packages

![](img/ggplot2.png){width="15%" fig-align="center"}

`ggplot2` is part of this collection of data science packages.

```{r}
#| message: true
#| warning: true
# Load necessary packages
library(tidyverse)
```

------------------------------------------------------------------------

## Data Setting: [Eco-Totem Broadway Bicycle Count](https://data.cambridgema.gov/Transportation-Planning/Eco-Totem-Broadway-Bicycle-Count/q8v9-mcfg)

::: columns
::: {.column width="40%" fig-align="center"}
![](img/counter.jpg){width="100%"}
:::

::: {.column width="60%" fig-align="center"}
![](img/bike_counter_map.png){width="100%"}
:::
:::

------------------------------------------------------------------------

## Import the [Data](https://data.cambridgema.gov/Transportation-Planning/Eco-Totem-Broadway-Bicycle-Count/q8v9-mcfg)

```{r}
#| echo: false
#| eval: false
bike_counter <- read_csv("https://data.cambridgema.gov/api/views/q8v9-mcfg/rows.csv")

# Fix Date column to be stored with the date class
library(lubridate)
bike_counter <- mutate(bike_counter, Date = mdy(Date))

# Filter to only include two days in July 2019
july_2019 <- filter(bike_counter,
                    Date %in% c(mdy("07/04/2019"),
                                mdy("07/11/2019")))
# Add an Occasion column
july_2019 <- mutate(july_2019,
                    Occasion = if_else(Date == mdy("07/04/2019"),
                                                    "Fourth of July",
                                                    "Normal Thursday"))

bike_counter_recent <- filter(bike_counter, Date >= mdy("07/01/2020"))
bike_counter_recent2 <- bike_counter %>%
  mutate(Month = month(Date, label = TRUE)) %>%
  group_by(Month, Day) %>%
  summarize(n = sum(Total))

bike_counter_july <- filter(bike_counter, (Date >= mdy("07/01/2020") &
                                        Date <= mdy("07/31/2020")) |
                                     (Date >= mdy("07/01/2019") &
                                        Date <= mdy("07/31/2019")))


write_csv(july_2019, "data/july_2019.csv")

write_csv(bike_counter_july, "data/bike_counter_july.csv")
```

```{r}
july_2019 <- read_csv("data/july_2019.csv")

# Inspect the data
glimpse(july_2019)
```

------------------------------------------------------------------------

## Inspect the Data

```{r}
# Look at first few rows
head(july_2019)
```

What does a row represent here?

------------------------------------------------------------------------

## Inspect the Data

```{r}
# Determine type
# To access one variable: dataset$variable
class(july_2019$Day)
class(july_2019$Total)
class(july_2019)

```

------------------------------------------------------------------------

## Grammar of Graphics

-   **data**: Data frame that contains the raw data
    -   Variables used in the graph
-   **geom**: Geometric **shape** that the data are mapped to.
    -   EX: Point, line, bar, text, ...
-   **aesthetic**: Visual properties of the **geom**
    -   EX: X (horizontal) position, y (vertical) position, color, fill, shape
-   **scale**: Controls how data are mapped to the visual values of the aesthetic.
    -   EX: particular colors, log scale
-   **guide**: Legend/key to help user convert visual display back to the data

------------------------------------------------------------------------

## `ggplot2` example code

**Guiding Principle**: We will map variables from the **data** to the **aes**thetic attributes (e.g. location, size, shape, color) of **geom**etric objects (e.g. points, lines, bars).

```{r, eval = FALSE, tidy = FALSE}
ggplot(data = ---, mapping = aes(---)) +
  geom_---(---) 
```

-   There are other layers, such as `scales_---_---()` and `labs()`, but we will wait on those.

------------------------------------------------------------------------

## Histograms

::: columns
::: {.column width="33%"}
-   Binned counts of data.

-   Great for assessing shape.
:::

::: {.column width="66%"}
```{r, echo = FALSE}
# Create histogram
ggplot(data = july_2019, mapping = aes(x = Total)) +
  geom_histogram()

```
:::
:::

------------------------------------------------------------------------

## Data Shapes

```{r, echo=FALSE, fig.width = 12, fig.asp = .4}
dat <- data_frame(x1 = rf(200,12,8), x2 = rnorm(200), x3 = (-1)*rf(200, 12, 8)+20)
p1 <- ggplot(dat, aes(x = x1)) +
  geom_histogram(bins = 20) +
  labs(title = "Right Skewed Shape")
p2 <- ggplot(dat, aes(x = x2)) +
  geom_histogram(bins = 15) +
  labs(title = "Bell Shaped \nand Symmetric")
p3 <- ggplot(dat, aes(x = x3)) +
  geom_histogram(bins = 15) + 
  labs(title = "Left Skewed Shape")
library(cowplot)
plot_grid(p1, p2, p3, ncol = 3)
```

------------------------------------------------------------------------

## Histograms

```{r hist}
#| output-location: column-fragment
# Create histogram
ggplot(data = july_2019, 
       mapping = aes(x = Total)) +
  geom_histogram()
```

------------------------------------------------------------------------

## Histograms

```{r hist2}
#| output-location: column-fragment
#| code-line-numbers: "4-6"
# Create histogram
ggplot(data = july_2019, 
       mapping = aes(x = Total)) +
  geom_histogram(color = "white",
                 fill = "violetred1",
                 bins = 50)
```

-   **mapping** to a variable goes in `aes()`
-   **setting** to a specific value goes in the `geom_---()`

------------------------------------------------------------------------

## Boxplots

::: columns
::: {.column width="50%"}
-   **Five number summary**:
    -   Minimum
    -   First quartile (Q1)
    -   Median
    -   Third quartile (Q3)
    -   Maximum
-   Interquartile range (IQR) $=$ Q3 $-$ Q1
-   Outliers: **unusual** points
    -   Boxplot defines unusual as being beyond $1.5*IQR$ from $Q1$ or $Q3$.
-   Whiskers: reach out to the furthest point that is NOT an outlier
:::

::: {.column width="50%"}
```{r echo = FALSE}
ggplot(data = july_2019, 
       mapping = aes(x = Occasion, 
                     y = Total)) +
  geom_boxplot()
```
:::
:::

------------------------------------------------------------------------

## Boxplots

```{r}
#| output-location: column-fragment
# Create boxplot
ggplot(data = july_2019, 
       mapping = aes(x = Occasion, 
                     y = Total)) +
  geom_boxplot()
```

------------------------------------------------------------------------

## Boxplots

```{r box2}
#| output-location: column-fragment
#| code-line-numbers: "4"
ggplot(data = july_2019, 
       mapping = aes(x = Occasion, 
                     y = Total)) +
  geom_boxplot(fill = "springgreen3")
```

------------------------------------------------------------------------

## Boxplots

```{r box3}
#| output-location: column-fragment
#| code-line-numbers: "4"
ggplot(data = july_2019, 
       mapping = aes(x = Occasion, 
                     y = Total,
                     fill = Occasion)) +
  geom_boxplot()
```

------------------------------------------------------------------------

## Boxplots

```{r box4}
#| output-location: column-fragment
#| code-line-numbers: "6"
ggplot(data = july_2019, 
       mapping = aes(x = Occasion, 
                     y = Total,
                     fill = Occasion)) +
  geom_boxplot() +
  guides(fill = "none")
```

------------------------------------------------------------------------

## Violin Plots

```{r vio}
#| output-location: column-fragment
ggplot(data = july_2019, 
       mapping = aes(x = Occasion, 
                     y = Total,
                     fill = Occasion)) +
  geom_violin() +
  guides(fill = "none")
```

------------------------------------------------------------------------

## Boxplot Versus Violin Plots

::: columns
::: {.column width="50%"}
```{r}
#| echo: false
ggplot(data = july_2019, 
       mapping = aes(x = Occasion, 
                     y = Total,
                     fill = Occasion)) +
  geom_boxplot() +
  guides(fill = "none")
```
:::

::: {.column width="50%"}
```{r}
#| echo: false
ggplot(data = july_2019, 
       mapping = aes(x = Occasion, 
                     y = Total,
                     fill = Occasion)) +
  geom_violin() +
  guides(fill = "none")
```
:::
:::

------------------------------------------------------------------------

## Recap: `ggplot2`

```{r, eval = FALSE, tidy = FALSE}
library(tidyverse)
ggplot(data = ---, mapping = aes(---)) +
  geom_---(---) 
```

------------------------------------------------------------------------

## Reminders

-   Class in full swing:
    -   [Sections](https://docs.google.com/spreadsheets/d/10wScs6Z7hpYK16NnmyU_q8DlKn4iF_U3dB19a-ts0g0/edit?usp=sharing): Can find your assigned section in my.harvard but need to go to the linked spreadsheet to find the room!
    -   [Office hours](https://docs.google.com/spreadsheets/d/1eGlvDVPFceat2xck-y0r_rhrXPZBxjkW-rmIWFqg68w/edit?usp=sharing)
    -   Wrap-ups on Th 3-4pm and Fri 10:30 - 11:30am in SC 309
    -   Lecture quiz will be released in **Gradescope** after class today.
