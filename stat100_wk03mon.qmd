---
pagetitle: "ggplot2"
format: 
  revealjs:
    chalkboard: true
#    incremental: true
    theme: [default, custom.scss]
    multiplex: true
    height: 900
    width: 1600
    slide-number: c
    auto-stretch: false
    callout-appearance: simple
    pdf-max-pages-per-slide: 1
    menu: 
      side: right
      numbers: true
    code-overflow: wrap
execute:
  echo: true
  warning: false
  message: false
  fig-asp: 0.75
  fig-width: 8
#  fig-align: center
  fig-dpi: 500
---

```{r}
#| include: false
#| warning: false
#| message: false
# Some global options still not available in quarto
 knitr::opts_chunk$set(fig.align = 'center')
library(knitr)
library(tidyverse)
theme_update(text = element_text(size = 20))
```

::: columns
::: {.column .center width="55%"}
![](img/DAW.png){width="80%"}
:::

::: {.column .center width="45%"}
[Graphing with `ggplot2`]{.custom-title}

<br>

[Kelly McConville]{.custom-subtitle}

[Stat 100 <br> Week 3 \| Fall 2023]{.custom-subtitle}
:::
:::

## Announcements

-   With COVID working its way through campus right now, make sure to check the [Sections](https://docs.google.com/spreadsheets/d/10wScs6Z7hpYK16NnmyU_q8DlKn4iF_U3dB19a-ts0g0/edit?usp=sharing) spreadsheet and the [Office hours](https://docs.google.com/spreadsheets/d/1eGlvDVPFceat2xck-y0r_rhrXPZBxjkW-rmIWFqg68w/edit?usp=sharing) spreadsheet for updates!
-   Grab a **postcard** and/or a **stamp** from SC 316 if you lost yours.
    -   We also have markers, colored pencils, and crayons!
-   Don't forget that P-Set 1 due on Tuesday by 5pm in Gradescope.
-   Come by office hours with any questions.

------------------------------------------------------------------------

## Goals for Today

::: columns
::: {.column width="\"50%"}
-   Come back to the general structure of `ggplot2`.
-   Learn a few standard graphs for numerical/quantitative data:
    -   **Histogram**: one numerical variable
    -   **Side-by-side boxplot**: one numerical variable and one categorical variable
    -   **Side-by-side violin plot**: one numerical variable and one categorical variable
    -   **Scatterplot**: two numerical variables
    -   **Linegraph**: two numerical variables
:::

::: {.column width="\"50%"}
-   And, learn the standard graphic for categorical data:
    -   **Barplot**: one categorical variable
    -   **Segmented barplot**: two categorical variables
-   Also cover some common extensions and customizations.
:::
:::

------------------------------------------------------------------------

## Load Necessary Packages

![](img/ggplot2.png){width="15%" fig-align="center"}

`ggplot2` is part of this collection of data science packages.

```{r}
#| message: true
#| warning: true
# Load necessary packages
library(tidyverse)
```

------------------------------------------------------------------------

## Data Setting: [Eco-Totem Broadway Bicycle Count](https://data.cambridgema.gov/Transportation-Planning/Eco-Totem-Broadway-Bicycle-Count/q8v9-mcfg)

::: columns
::: {.column width="40%" fig-align="center"}
![](img/counter.jpg){width="100%"}
:::

::: {.column width="60%" fig-align="center"}
![](img/bike_counter_map.png){width="100%"}
:::
:::

------------------------------------------------------------------------

## Import the [Data](https://data.cambridgema.gov/Transportation-Planning/Eco-Totem-Broadway-Bicycle-Count/q8v9-mcfg)

```{r}
july_2019 <- read_csv("data/july_2019.csv")

# Inspect the data
glimpse(july_2019)
```

------------------------------------------------------------------------

## `ggplot2` example code

**Guiding Principle**: We will map variables from the **data** to the **aes**thetic attributes (e.g. location, size, shape, color) of **geom**etric objects (e.g. points, lines, bars).

<br>

```{r, eval = FALSE, tidy = FALSE}
ggplot(data = ---, mapping = aes(---)) +
  geom_---(---) 
```

<br>

There are other layers, such as `scales_---_---()` and `labs()`, but we will wait on those.

------------------------------------------------------------------------

## Histograms

```{r hist}
#| output-location: column
# Create histogram
ggplot(data = july_2019, 
       mapping = aes(x = Total)) +
  geom_histogram()
```

------------------------------------------------------------------------

## Histograms

```{r hist2}
#| output-location: column
#| code-line-numbers: "4-6|"
# Create histogram
ggplot(data = july_2019, 
       mapping = aes(x = Total)) +
  geom_histogram(color = "white",
                 fill = "violetred1",
                 bins = 50)
```

-   **mapping** to a variable goes in `aes()`
-   **setting** to a specific value goes in the `geom_---()`

------------------------------------------------------------------------

## Boxplots

::: columns
::: {.column width="50%"}
-   **Five number summary**:
    -   Minimum
    -   First quartile (Q1)
    -   Median
    -   Third quartile (Q3)
    -   Maximum
-   Interquartile range (IQR) $=$ Q3 $-$ Q1
-   Outliers: **unusual** points
    -   Boxplot defines unusual as being beyond $1.5*IQR$ from $Q1$ or $Q3$.
-   Whiskers: reach out to the furthest point that is NOT an outlier
:::

::: {.column width="50%"}
```{r echo = FALSE}
ggplot(data = july_2019, 
       mapping = aes(x = Occasion, 
                     y = Total)) +
  geom_boxplot()
```
:::
:::

------------------------------------------------------------------------

## Boxplots

```{r}
#| output-location: column
# Create boxplot
ggplot(data = july_2019, 
       mapping = aes(x = Occasion, 
                     y = Total)) +
  geom_boxplot()
```

------------------------------------------------------------------------

## Boxplots

```{r box2}
#| output-location: column
#| code-line-numbers: "4|"
ggplot(data = july_2019, 
       mapping = aes(x = Occasion, 
                     y = Total)) +
  geom_boxplot(fill = "springgreen3")
```

------------------------------------------------------------------------

## Boxplots

```{r box3}
#| output-location: column
#| code-line-numbers: "4|"
ggplot(data = july_2019, 
       mapping = aes(x = Occasion, 
                     y = Total,
                     fill = Total)) +
  geom_boxplot()
```

------------------------------------------------------------------------

## Boxplots

```{r box4}
#| output-location: column
#| code-line-numbers: "6|"
ggplot(data = july_2019, 
       mapping = aes(x = Occasion, 
                     y = Total,
                     fill = Occasion)) +
  geom_boxplot() +
  guides(fill = "none")
```

------------------------------------------------------------------------

## Violin Plots

```{r vio}
#| output-location: column
ggplot(data = july_2019, 
       mapping = aes(x = Occasion, 
                     y = Total,
                     fill = Occasion)) +
  geom_violin() +
  guides(fill = "none")
```

------------------------------------------------------------------------

## Boxplot Versus Violin Plots

::: columns
::: {.column width="50%"}
```{r}
#| echo: false
ggplot(data = july_2019, 
       mapping = aes(x = Occasion, 
                     y = Total,
                     fill = Occasion)) +
  geom_boxplot() +
  guides(fill = "none")
```
:::

::: {.column width="50%"}
```{r}
#| echo: false
ggplot(data = july_2019, 
       mapping = aes(x = Occasion, 
                     y = Total,
                     fill = Occasion)) +
  geom_violin() +
  guides(fill = "none")
```
:::
:::

------------------------------------------------------------------------

## Scatterplots

-   Explore relationships between numerical variables.
    -   We will be especially interested in **linear** relationships.

::: fragment
```{r}
#| output-location: column

ggplot(data = july_2019,
       mapping = aes(x = Time,
                     y = Total)) +
  geom_point(size = 2)
```
:::

------------------------------------------------------------------------

## Scatterplots

```{r}
#| output-location: column
#| code-line-numbers: "4|"

ggplot(data = july_2019,
       mapping = aes(x = Time,
                     y = Total)) +
  geom_point(size = 2, alpha = 0.6)
```

-   Fix over-plotting
-   Why the weird pattern??

------------------------------------------------------------------------

## Scatterplots

```{r}
#| output-location: column
#| code-line-numbers: "4|"

ggplot(data = july_2019,
       mapping = aes(x = Time,
                     y = Total,
                     color = Occasion)) +
  geom_point(size = 2, alpha = 0.6)
```

------------------------------------------------------------------------

## Linegraphs

Also called **time series plot** when time is represented on the x axis.

```{r}
#| output-location: column

ggplot(data = july_2019,
       mapping = aes(x = Time,
                     y = Total,
                     color = Occasion)) +
  geom_line(alpha = 0.6)
```

------------------------------------------------------------------------

## Linegraphs

Also called **time series plot** when time is represented on the x axis.

```{r}
#| output-location: column


ggplot(data = july_2019,
       mapping = aes(x = Time,
                     y = Total,
                     color = Occasion)) +
  geom_line(alpha = 0.6) +
  theme(legend.pos = "bottom")
```

------------------------------------------------------------------------

## New Data Setting: [Dog Names in Cambridge, MA](https://data.cambridgema.gov/General-Government/Dogs-of-Cambridge/sckh-3xyx)

Based on dog license data collected by Cambridge's Animal Commission

```{r}
# Import and inspect data
dogs <- read_csv("https://data.cambridgema.gov/api/views/sckh-3xyx/rows.csv")
glimpse(dogs)
```

------------------------------------------------------------------------

## Data Wrangling

**We haven't learned this topic yet.**

**I only included this code for completeness/transparency.**

```{r}
# Create a column for Breed
dogs <- mutate(dogs, Breed = if_else(
                       Dog_Breed == "Mixed Breed",
                       "Mixed", "Single"))


# Find the 5 top most common names
top5names <- count(dogs, Dog_Name) %>%
  slice_max(n = 5, order_by = n) %>%
  select(Dog_Name) %>%
  pull()
  
# Filter dataset to only the 5 top most common names
dogs_top5 <- filter(dogs,
                     Dog_Name %in% top5names)


```

# Before we graph the data, do we have any guesses on popular dog names?

------------------------------------------------------------------------

## Barplots

::: columns
::: {.column width="50%"}
Displays the frequency for each category.
:::

::: {.column width="50%"}
```{r}
#| echo: false
# Create barplot
ggplot(data = dogs_top5, 
    mapping = aes(x = Dog_Name)) +
  geom_bar()

```
:::
:::

------------------------------------------------------------------------

## Barplots

```{r}
#| output-location: column
# Create barplot
ggplot(data = dogs_top5, 
    mapping = aes(x = Dog_Name)) +
  geom_bar()

```

How could we make this graph better?

------------------------------------------------------------------------

## Barplots

```{r}
#| output-location: column
#| code-line-numbers: "2|"
# Create barplot
ggplot(data = dogs_top5, 
  mapping = aes(x = fct_infreq(Dog_Name))) +
  geom_bar()
```

------------------------------------------------------------------------

## Segmented Barplots

```{r}
#| output-location: column

# Create segmented barplot
ggplot(data = dogs_top5, 
       mapping = aes(x = fct_infreq(Dog_Name),
                     fill = Breed)) +
  geom_bar() +
  theme(legend.pos = "bottom")
```

-   Each bar is divided into the frequencies of the `fill` variable.

-   Hard to make comparisons across categories.

------------------------------------------------------------------------

## Segmented Barplots

```{r}
#| output-location: column
#| code-line-numbers: "5|"

# Create segmented barplot
ggplot(data = dogs_top5, 
       mapping = aes(x = fct_infreq(Dog_Name),
                     fill = Breed)) +
  geom_bar(position = "dodge") +
  theme(legend.pos = "bottom")
```

-   Can add the `position` argument into the `geom_bar()`.

------------------------------------------------------------------------

## Segmented Barplots

```{r}
#| output-location: column
#| code-line-numbers: "5|"

# Create segmented barplot
ggplot(data = dogs_top5, 
       mapping = aes(x = fct_infreq(Dog_Name),
                     fill = Breed)) +
  geom_bar(position = "fill") +
  theme(legend.pos = "bottom")
```

-   Now each bar is divided into **proportions** based on the `fill` variable.

------------------------------------------------------------------------

## Adding More Variables

-   Two main approaches:
    -   Utilize other `aes`thetics of the `geom`
    -   Facet: Create multiple plots across the categories of a categorical variable.

------------------------------------------------------------------------

## Utilize other `aes`thetics

```{r}
#| output-location: column
ggplot(data = july_2019,
       mapping = aes(x = Time,
                     y = Total,
                     color = Occasion)) +
  geom_line(size = 2) +
  theme(legend.pos = "bottom")
```

-   Already saw how to add a third variable to a line graph (and a scatterplot) via `color`.
    -   Can also change size or type.

------------------------------------------------------------------------

## Facet

```{r fac}
#| output-location: column
ggplot(data = dogs_top5,
       mapping = aes(x = Longitude_masked,
                     y = Latitude_masked)) +
  geom_point(size = 2) +
  facet_wrap(~Dog_Name, ncol = 2)
```

------------------------------------------------------------------------

## Facet

```{r}
#| output-location: column
ggplot(data = dogs_top5,
       mapping = aes(x = Longitude_masked,
                     y = Latitude_masked)) +
  geom_point(size = 2)  +
  facet_grid(Breed~Dog_Name)
```

------------------------------------------------------------------------

## Consider Doing Both!

```{r both}
#| output-location: column
ggplot(data = dogs_top5,
       mapping = aes(x = Longitude_masked,
                     y = Latitude_masked,
                     color = Breed)) +
  geom_point(size = 2) +
  facet_wrap(~Dog_Name, ncol = 2)
```

------------------------------------------------------------------------

## Adding Some Context

```{r line3}
#| output-location: column
ggplot(data = july_2019,
       mapping = aes(x = Time,
                     y = Total,
                     color = Occasion)) +
  geom_line(size = 2) +
  theme(legend.pos = "bottom") +
  labs(x = "Time of Day",
       y = "Number of Passes",
       color = "What Type of Day?",
       caption = "Data Collected by Eco-Totem",
       title = "Cycling Patterns at Broadway Bike Counter")
```

------------------------------------------------------------------------

## Customizing your `ggplot2` Plots

-   There are so **many** ways you can customize the look of your `ggplot2` plots.

-   Let's look at some common changes:

    -   Fussing with labels
    -   Zooming in
    -   Using multiple `geoms`
    -   Color!
    -   Themes

------------------------------------------------------------------------

## Fussing with Labels: Rotate

```{r bar4}
#| output-location: column
ggplot(data = dogs_top5,
       mapping = aes(x = Longitude_masked,
                     y = Latitude_masked)) +
  geom_point(size = 2)  +
  facet_grid(Breed~Dog_Name) + 
  theme(axis.text.x =
          element_text(angle = 45,
                       vjust = 1,
                       hjust = 1))

```

------------------------------------------------------------------------

## Zooming In

```{r}
#| output-location: column
ggplot(data = july_2019, 
       mapping = aes(x = Occasion, 
                     y = Total,
                     fill = Occasion)) +
  geom_boxplot() +
  guides(fill = "none")
```

------------------------------------------------------------------------

## Zooming In

```{r box5}
#| output-location: column
#| code-line-numbers: "7|"
ggplot(data = july_2019, 
       mapping = aes(x = Occasion, 
                     y = Total)) +
  geom_boxplot(fill = "springgreen2") +
  guides(fill = "none") +
  coord_cartesian(ylim = c(0, 40))  +
  scale_fill_manual()
```

------------------------------------------------------------------------

## Multiple `geom`s

```{r}
#| output-location: column
ggplot(data = july_2019, 
       mapping = aes(x = Occasion, 
                     y = Total,
                     fill = Occasion)) +
  geom_boxplot() +
  guides(fill = "none") +
  coord_cartesian(ylim = c(0, 40)) +
  geom_jitter(width = 0.1,
              height = 0, 
              alpha = 0.6)
```

------------------------------------------------------------------------

## Multiple `geom`s

```{r}
#| output-location: column
ggplot(data = july_2019,
       mapping = aes(x = Time,
                     y = Total,
                     color = Occasion)) +
  geom_line(size = 2) +
  theme(legend.pos = "bottom") +
  geom_point(size = 3)
```

------------------------------------------------------------------------

## Change the Color

```{r}
colors()
```

------------------------------------------------------------------------

## Change the Color

```{r}
#| output-location: column
ggplot(data = july_2019,
       mapping = aes(x = Time,
                     y = Total,
                     color = Occasion)) +
  geom_line(size = 2) +
  theme(legend.pos = "bottom") +
  scale_color_manual(values = c("violetred2",
                                "steelblue4"))
```

------------------------------------------------------------------------

## Change the Color

```{r}
#| output-location: column
ggplot(data = july_2019,
       mapping = aes(x = Time,
                     y = Total,
                     color = Occasion)) +
  geom_line(size = 2) +
  theme(legend.pos = "bottom") +
  scale_color_manual(values = c("#0D6759",
                                "#E4844A"))
```

------------------------------------------------------------------------

## Use a [Different Theme](https://ggplot2.tidyverse.org/reference/ggtheme.html)

```{r}
#| output-location: column
ggplot(data = july_2019,
       mapping = aes(x = Time,
                     y = Total,
                     color = Occasion)) +
  geom_line(size = 2) +
  scale_color_manual(values = c("#0D6759",
                                "#E4844A")) +
  theme_bw() +
  theme(legend.pos = "bottom")
```

# What `ggplot2` questions do we have?

------------------------------------------------------------------------

## Reminders

-   With COVID working its way through campus right now, make sure to check the [Sections](https://docs.google.com/spreadsheets/d/10wScs6Z7hpYK16NnmyU_q8DlKn4iF_U3dB19a-ts0g0/edit?usp=sharing) spreadsheet and the [Office hours](https://docs.google.com/spreadsheets/d/1eGlvDVPFceat2xck-y0r_rhrXPZBxjkW-rmIWFqg68w/edit?usp=sharing) spreadsheet for updates!
-   Grab a **postcard** and/or a **stamp** from SC 316 if you lost yours.
    -   We also have markers, colored pencils, and crayons!
-   Don't forget that P-Set 1 due on Tuesday by 5pm in Gradescope.
-   Come by office hours with any questions.
